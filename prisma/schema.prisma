// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String      @id @default(cuid())
  name          String
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  whatsapp      String?
  instagram     String?
  price         Int?
  address       String?
  description   String?     @db.LongText
  accounts      Account[]
  sessions      Session[]
  Jobs          Jobs[]
  status        Status      @default(NEW)
  bankAgency    String?
  bankNumber    String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Jobs_Done     Jobs_Done[]
}

model Admin {
  id       String @id @default(cuid())
  name     String @unique
  password String
}

model Jobs {
  id          String    @id @default(cuid())
  name        String    @db.VarChar(100)
  campus      Campus    @relation(fields: [campusId], references: [name])
  campusId    String
  date        DateTime
  session     Int
  whatsapp    String
  instagram   String
  drive       String?   @db.LongText
  freelance   User?     @relation(fields: [freelanceId], references: [id], onDelete: SetNull)
  freelanceId String?
  status      JobStatus @default(ONGOING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Jobs_Done {
  id          String    @id @default(cuid())
  name        String    @db.VarChar(100)
  campus      Campus    @relation(fields: [campusId], references: [name])
  campusId    String
  date        DateTime
  session     Int
  whatsapp    String
  instagram   String
  drive       String?   @db.LongText
  freelance   User?     @relation(fields: [freelanceId], references: [id], onDelete: SetNull)
  freelanceId String?
  status      JobStatus @default(COMPLETED)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Campus {
  name      String      @id @unique
  Jobs      Jobs[]
  Jobs_Done Jobs_Done[]
}

enum Status {
  NEW
  SUBMIT
  APPROVED
  REJECTED
}

enum JobStatus {
  ONGOING
  DOING
  DONE
  COMPLETED
}
